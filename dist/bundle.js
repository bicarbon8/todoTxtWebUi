!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.formatDate=function(e){var t=e.getFullYear(),n=(e.getMonth()+1).toString();n=n.length<2?"0"+n:n;var o=e.getDate().toString();return o=o.length<2?"0"+o:o,String(t+"-"+n+"-"+o)},e.getLanguage=function(){return(window.navigator.userLanguage||window.navigator.language).toLowerCase()},e.guid=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},e.htmlEncode=function(e){return String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/\s{2}/g," &nbsp;")},e.htmlUnencode=function(e){return String(e).replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&nbsp;/g," ")}}(t.TodoTxtUtils||(t.TodoTxtUtils={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(){function e(e){this.projects=[],this.contexts=[],this.metadatas=[],this.id=o.TodoTxtUtils.guid(),this.isActive=!0,this.parseInput(e)}return e.prototype.parseInput=function(e){e&&(this.text=e,this.parseStatus(),this.parsePriority(),this.parseCompletedDate(),this.parseCreatedDate(),this.parseProjects(),this.parseContexts())},e.prototype.parseStatus=function(){var e=this.text.match(/^(x )/);e&&e.length>0?this.isActive=!1:this.isActive=!0},e.prototype.parsePriority=function(){var e=null,t=this.text.match(/^(\([A-Z]\)[\s]+)/);t&&(e=t[0].replace(/[\s]*/g,"")),this.priority=e},e.prototype.parseCompletedDate=function(){var e=null;if(!this.isActive){var t=this.getDatesFromText();t&&(e=t[0]?t[0].replace(/[\s]*/g,""):null)}this.completedDate=e},e.prototype.parseCreatedDate=function(){var e=null,t=this.getDatesFromText();t&&(this.isActive?e=t[0]?t[0].replace(/[\s]*/g,""):null:t.length>1&&(e=t[1]?t[1].replace(/[\s]*/g,""):null)),this.createdDate=e},e.prototype.getDatesFromText=function(){var e=[],t=this.text.match(/(?:\s|^)(\d{4}-\d{2}-\d{2})(?=\s)/g);if(t)for(var n=0;n<t.length;n++)e.push(t[n]);return e},e.prototype.parseProjects=function(){var e=new Set,t=this.text.match(/((\s|^)[\(\{\["']?\+[0-9A-Za-z]+[\)\}\]"']?(?=\s|$))/g);if(t)for(var n=0;n<t.length;n++){var o=t[n].replace(/[\s]*/g,"").replace(/[\(\{\[\)\}\]"']/g,"");e.add(o)}this.projects=Array.from(e)},e.prototype.parseContexts=function(){var e=new Set,t=this.text.match(/((\s|^)[\(\{\["']?\@[0-9A-Za-z]+[\)\}\]"']?(?=\s|$))/g);if(t)for(var n=0;n<t.length;n++){var o=t[n].replace(/[\s]*/g,"").replace(/[\(\{\[\)\}\]"']/g,"");e.add(o)}this.contexts=Array.from(e)},e}();t.TodoTxtTask=a},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.priorities=new Set,e.projects=new Set,e.contexts=new Set,e.reset=function(){e.priorities=new Set,e.projects=new Set,e.contexts=new Set}}(t.TodoTxtAttributes||(t.TodoTxtAttributes={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(8);!function(e){var t=new Map,n={showClosed:!1},r=0;function i(){try{var e=new a.TodoTextPersistance(t,n);localStorage.setItem("todo-txt",JSON.stringify(e))}catch(e){0==r&&(alert("WARNING: unable to store Tasks in localStorage; ensure you export your tasks before you close the browser or they will be lost!"),console.error("TodoTxt unable to cache data in localStorage due to: "+e),r++)}}function s(){try{var e=localStorage.getItem("todo-txt");if(e){var a=JSON.parse(e);if(a.tasks){t.clear();for(var i=0;i<a.tasks.length;i++){var s=a.tasks[i];if(s.text&&s.id){var c=new o.TodoTxtTask(s.text);c.id=s.id,t.set(c.id,c)}}n=a.config}}}catch(e){0==r&&console.info("TodoTxt unable to load cache from localStorage due to: "+e)}}e.addTask=function(e){t.has(e.id)&&t.delete(e.id),t.set(e.id,e),i()},e.removeTask=function(e){var n=!1;return t.has(e)&&(t.delete(e),n=!0),i(),n},e.removeAllTasks=function(){t=new Map,i()},e.getTask=function(e){if(s(),t.has(e))return t.get(e);throw new Error("no TodoTxtTask with ID of '"+e+"' could be found")},e.getAllTasks=function(){s();var e=[];return t.forEach((function(t){e.push(t)})),e},e.getConfig=function(){return s(),n},e.setConfig=function(e){n=e,i()},e._clear=function(){t=new Map,n={showClosed:!1},localStorage.removeItem("todo-txt")}}(t.TodoTxtVault||(t.TodoTxtVault={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),a=n(6);o("document").ready((function(){a.TodoTxtView.initializeElements(),a.TodoTxtView.refreshUi()}))},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(a,r){function i(e){try{c(o.next(e))}catch(e){r(e)}}function s(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}c((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,a,r,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(a=2&r[0]?o.return:r[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,r[1])).done)return a;switch(o=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,o=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){i=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){i.label=r[1];break}if(6===r[0]&&i.label<a[1]){i.label=a[1],a=r;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(r);break}a[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],o=0}finally{n=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(7),s=n(2),c=n(9),l=n(0),d=n(3),u=n(4);!function(e){function t(e){var t="glyphicon-ok",n="btn-default",o=$(e);e.isActive||(t="glyphicon-remove",n="btn-danger");var a=document.createElement("div");a.className="btn-group btn-block",a.id=e.id;var r=document.createElement("span");r.classList.add("glyphicon"),r.classList.add(t);var i=document.createElement("span");i.classList.add("col-xs-2"),i.classList.add("btn"),i.classList.add("btn-lg"),i.classList.add(n),i.onclick=function(t){z(e.id),q()},i.appendChild(r),a.appendChild(i);var s=document.createElement("button");return s.classList.add("col-xs-10"),s.classList.add("ellipsis"),s.classList.add("btn"),s.classList.add("btn-lg"),s.classList.add(n),s.innerHTML=o,s.onclick=function(t){return v(e.id)},a.appendChild(s),a}function n(e){var t=document.createElement("li");return t.id=e,t.className="list-group-item",t.onclick=function(t){I(e)},t.onmouseover=function(e){t.className+=" active"},t.onmouseout=function(e){t.className=t.className.replace(/(( |^)active)/,"")},t.innerHTML='<h4 class="ellipsis">'+e+"</h4>",t}function p(){var e=document.querySelector("#filter-input").value,t=i.TodoTxt.getFilteredTaskArray(e);if(!u.TodoTxtVault.getConfig().showClosed){var n=t.filter((function(e){return e.isActive}));t=n}t&&t.length>0&&t.forEach((function(e){f(e)}))}function f(e){document.querySelector("#listContainer-div").appendChild(t(e))}function v(t){var n,o=!1;t?n=i.TodoTxt.getTask(t):(n=new r.TodoTxtTask,o=!0),k(e.mainEventHandlers);var a=function(e,t){var n=document.createElement("span");s(n).attr("aria-hidden","true"),n.innerHTML=" &times;";var o=document.createElement("button");o.type="button",o.id="modalEditClose-button",o.classList.add("close"),s(o).attr("data-dismiss","modal"),s(o).attr("aria-label",c.TodoTxtResources.get("CLOSE")),o.onclick=function(e){g()},o.appendChild(n);var a=document.createElement("h4");a.classList.add("modal-title"),a.id="modalEdit-label";var r=document.createElement("div");r.classList.add("modal-header"),r.appendChild(o),r.appendChild(a);var i=document.createElement("div");i.id="modalEdit-textarea",i.classList.add("textarea"),i.contentEditable="true";var l=$(e).replace(/hidden-xs/,"");i.innerHTML=l;var d=document.createElement("div");d.classList.add("modal-body"),d.appendChild(i);var u=document.createElement("span");u.classList.add("hidden-xs");var p=t?c.TodoTxtResources.get("ADD"):c.TodoTxtResources.get("UPDATE");u.innerText=" "+p;var f=document.createElement("span");f.classList.add("glyphicon"),f.classList.add("glyphicon-ok");var v=document.createElement("a");v.type="button",v.id="modalEditSave-button",v.classList.add("btn"),v.classList.add("btn-lg"),v.classList.add("btn-success"),s(v).attr("data-toggle","tooltip"),s(v).attr("data-placement","top"),s(v).attr("text",p),v.onclick=function(e){D()},v.appendChild(f),v.appendChild(u);var h=document.createElement("span");h.classList.add("hidden-xs"),h.innerText=" "+c.TodoTxtResources.get("PREVIEW");var m=document.createElement("span");m.classList.add("glyphicon"),m.classList.add("glyphicon-eye-open");var x=document.createElement("a");x.type="button",x.id="modalEditPreview-button",x.classList.add("btn"),x.classList.add("btn-lg"),x.classList.add("btn-primary"),s(x).attr("data-toggle","tooltip"),s(x).attr("data-placement","top"),s(x).attr("text",c.TodoTxtResources.get("PREVIEW")),x.onclick=function(e){T()},x.appendChild(m),x.appendChild(h);var y=document.createElement("span");y.classList.add("hidden-xs"),y.innerText=" "+c.TodoTxtResources.get("DELETE");var b=document.createElement("span");b.classList.add("glyphicon"),b.classList.add("glyphicon-floppy-remove");var E=document.createElement("a");E.type="button",E.id="modalEditDelete-button",E.classList.add("btn"),E.classList.add("btn-lg"),E.classList.add("btn-danger"),s(E).attr("data-toggle","tooltip"),s(E).attr("data-placement","top"),s(E).attr("text",c.TodoTxtResources.get("DELETE")),E.onclick=function(e){_()},E.appendChild(b),E.appendChild(y);var C=document.createElement("div");C.classList.add("btn-group"),C.classList.add("btn-group-justified"),C.appendChild(v),C.appendChild(x),t||C.appendChild(E);var k=document.createElement("div");k.classList.add("modal-footer"),k.appendChild(C);var S=document.createElement("div");S.classList.add("modal-content"),S.appendChild(r),S.appendChild(d),S.appendChild(k);var w=document.createElement("div");w.classList.add("modal-dialog"),w.appendChild(S);var L=document.createElement("div");return L.classList.add("modal"),L.id="modalEdit-div",L.tabIndex=-1,s(L).attr("role","dialog"),s(L).attr("aria-labelledby","modalEdit-label"),s(L).attr("aria-hidden","true"),s(L).attr("task-id",e.id),L.appendChild(w),L}(n,o);document.body.appendChild(a),C(e.modalEventHandlers),s(a).show(0),document.querySelector("#modalEdit-textarea").focus()}function T(){var e=document.querySelector("#modalEdit-textarea");if(e){var t=e.textContent,n=new r.TodoTxtTask(t);e.innerHTML=$(n)}}function g(){k(e.modalEventHandlers),s("#modalEdit-div").remove(),C(e.mainEventHandlers),q()}function h(){var e=document.querySelector("#priorities-ul");d.TodoTxtAttributes.priorities.forEach((function(t){if(t||u.TodoTxtVault.getConfig().showClosed){var o=n(t);e.appendChild(o)}}))}function m(){document.querySelector("#priorities-ul").innerHTML=""}function x(){var e=document.querySelector("#projects-ul");d.TodoTxtAttributes.projects.forEach((function(t){if(t||u.TodoTxtVault.getConfig().showClosed){var o=n(t);e.appendChild(o)}}))}function y(){document.querySelector("#projects-ul").innerHTML=""}function b(){var e=document.querySelector("#contexts-ul");d.TodoTxtAttributes.contexts.forEach((function(t){if(t||u.TodoTxtVault.getConfig().showClosed){var o=n(t);e.appendChild(o)}}))}function E(){document.querySelector("#contexts-ul").innerHTML=""}function C(e){e.forEach((function(e){var t=!1;e.uc&&(t=e.uc);try{e.el().addEventListener(e.ev,e.fn,t)}catch(e){console.error(e)}}))}function k(e){e.forEach((function(e){var t=!1;e.uc&&(t=e.uc);try{e.el().removeEventListener(e.ev,e.fn,t)}catch(e){console.error(e)}}))}function S(e){83==e.keyCode&&e.altKey&&J()}function w(e){67==e.keyCode&&e.altKey&&q()}function L(e){84==e.keyCode&&e.altKey&&v()}function A(e){B(e)}function R(e){e.keyCode&&13===e.keyCode&&e.altKey&&D()}function D(){var e=document.querySelector("#modalEdit-div"),t=s(e).attr("task-id"),n=document.querySelector("#modalEdit-textarea").textContent;if(n=l.TodoTxtUtils.htmlUnencode(n),i.TodoTxt.updateTask(t,n)){q();try{g()}catch(e){}}}function P(e){27!==e.keyCode&&0!==e.keyCode||g()}function _(){var e=document.querySelector("#modalEdit-div"),t=s(e).attr("task-id"),n=i.TodoTxt.getTask(t);if(n&&confirm(c.TodoTxtResources.get("DELETE_CONFIRM")+'\n\t"'+n.text+'"')&&u.TodoTxtVault.removeTask(t)){q();try{g()}catch(e){}}}var O;function j(){O&&window.clearTimeout(O),O=window.setTimeout((function(){H()}),500)}function M(e){e.keyCode&&80===e.keyCode&&e.altKey&&T()}function q(){U(u.TodoTxtVault.getConfig().showClosed),k(e.mainEventHandlers),N(),m(),y(),E(),F(),p(),h(),x(),b(),C(e.mainEventHandlers)}function I(e){e&&(document.querySelector("#filter-input").value=e,j())}function F(){document.querySelector("#filter-input").value=""}function N(){document.querySelector("#listContainer-div").innerHTML=""}function H(){N(),p()}function V(){U(!!!document.querySelector("#showClosed-label").className.match(/(( |^)btn-success)/))}function U(e){var t=document.querySelector("#showClosed-label");t.className=e?t.className.replace(/(( |^)btn-danger)/," btn-success"):t.className.replace(/(( |^)btn-success)/," btn-danger"),u.TodoTxtVault.setConfig({showClosed:e})}function K(e){var t=document.querySelector("#"+e+" .panel-heading"),n=document.querySelector("#"+e+" .panel-body");!!n.className.match(/(( |^)collapse)/)?W(t,n):X(t,n)}function W(e,t){var n=e.querySelector(".glyphicon");t.className=t.className.replace(/(( |^)collapse)/g,""),n.className=n.className.replace(/(( |^)glyphicon-chevron-down)/," glyphicon-chevron-up")}function X(e,t){var n=e.querySelector(".glyphicon");t.className+=" collapse",n.className=n.className.replace(/(( |^)glyphicon-chevron-up)/," glyphicon-chevron-down")}function z(e){var t=i.TodoTxt.getTask(e);t&&(t.isActive?i.TodoTxt.closeTask(e):i.TodoTxt.activateTask(e))}function B(e){e.stopPropagation(),e.preventDefault();var t=e.dataTransfer.files;if(t.length>0){var n=t[0],o=new FileReader;o.onloadend=function(e){confirm(c.TodoTxtResources.get("OVERWRITE_CONFIRM"))&&(i.TodoTxt.parseTodoTxtFile(e.target.result.toString()),q())},o.readAsText(n,"UTF-8")}}function Z(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function J(){var e=i.TodoTxt.getSortedTaskArray().join("\n"),t=encodeURI("data:text/csv;charset=utf-8,"+e);window.open(t)}function $(e){var t=e.text||"";t=l.TodoTxtUtils.htmlEncode(t);var n=G(e);t=t.replace(e.priority,'<span class="'+n+'"><b>'+e.priority+"</b></span>"),e.projects.forEach((function(e){var n=new RegExp(e.replace(/\+/g,"\\+")+"(?![0-9A-Za-z])","g");t=t.replace(n,'<span class="text-muted"><b><i>'+e+"</i></b></span>")})),e.contexts.forEach((function(e){var n=new RegExp(e+"(?![0-9A-Za-z])","g");t=t.replace(n,'<span class="text-muted"><b><i>'+e+"</i></b></span>")}));var o=e.createdDate;return o&&(t=t.replace(o,'<span class="text-muted hidden-xs"><b><i>'+o+"</i></b></span>")),t}function G(e){var t="";return null!==e.priority&&e.isActive&&("(A)"===e.priority&&(t+=" text-danger"),"(B)"===e.priority&&(t+=" text-warning"),"(C)"===e.priority&&(t+=" text-primary")),t}e.generateTaskElement=t,e.generateListElement=n,e.displayTasks=p,e.displayTask=f,e.removeTask=function(e){document.querySelector("#listContainer-div").removeChild(document.querySelector("#"+e))},e.displayModalForTask=v,e.updateModalPreview=T,e.removeModal=g,e.modalEventHandlers=[{el:function(){return document},ev:"keydown",fn:function(e){R(e)}},{el:function(){return document},ev:"keydown",fn:function(e){P(e)}},{el:function(){return document},ev:"keydown",fn:function(e){M(e)}}],e.displayPriorities=h,e.clearPriorities=m,e.displayProjects=x,e.clearProjects=y,e.displayContexts=b,e.clearContexts=E,e.mainEventHandlers=[{el:function(){return document},ev:"keydown",fn:function(e){S(e)}},{el:function(){return document},ev:"keydown",fn:function(e){w(e)}},{el:function(){return document},ev:"keydown",fn:function(e){L(e)}},{el:function(){return document.querySelector("#fileDrop-div")},ev:"dragover",fn:function(e){Z(e)}},{el:function(){return document.querySelector("#fileDrop-div")},ev:"drop",fn:function(e){A(e)}},{el:function(){return document.querySelector("#fileUpload-input")},ev:"change",fn:function(e){A(e)}},{el:function(){return document.querySelector("#showClosed-label")},ev:"click",fn:function(){V(),q()}},{el:function(){return document.querySelector("#addTaskButton-button")},ev:"click",fn:function(){v()}},{el:function(){return document.querySelector("#saveFileButton-button")},ev:"click",fn:function(){J()}},{el:function(){return document.querySelector("#filter-input")},ev:"keyup",fn:function(){j()}},{el:function(){return document.querySelector("#clearFilter-button")},ev:"click",fn:function(){q()}},{el:function(){return document.querySelector("#priorities-div .panel-heading")},ev:"click",fn:function(){K("priorities-div")}},{el:function(){return document.querySelector("#projects-div .panel-heading")},ev:"click",fn:function(){K("projects-div")}},{el:function(){return document.querySelector("#contexts-div .panel-heading")},ev:"click",fn:function(){K("contexts-div")}}],e.bindControlEvents=C,e.unbindControlEvents=k,e.handleAltS=S,e.handleAltC=w,e.handleAltT=L,e.handleDrop=A,e.handleAltEnter=R,e.handleEsc=P,e.handleDeleteClick=_,e.handleFilter=j,e.handleAltP=M,e.refreshUi=q,e.setFilters=I,e.clearFilters=F,e.clearTasks=N,e.filterDisplayedTasks=H,e.toggleShowClosedStatus=V,e.setShowClosed=U,e.togglePanel=K,e.showPanel=W,e.hidePanel=X,e.toggleTaskStatus=z,e.getTodoTxtFile=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,new Promise((function(t,n){try{s.ajax({url:e,cache:!1,error:function(e,t){alert(t)},success:function(e){i.TodoTxt.parseTodoTxtFile(e),q(),t()}})}catch(e){n(e)}}))];case 1:return t.sent(),[2]}}))}))},e.handleFileSelect=B,e.handleDragOver=Z,e.exportTodoTxtFile=J,e.getMarkupForTask=$,e.getDisplayClassForTask=G,e.initializeElements=function(){var e='     <div class="container-fluid" id="fileDrop-div">     <div class="col-md-9">         <div class="row">             <div class="btn-group btn-group-justified">                 <a class="btn btn-block btn-primary btn-lg btn-file ellipsis" data-toggle="tooltip" data-placement="top" text="'+c.TodoTxtResources.get("IMPORT")+'">                     <span class="glyphicon glyphicon-save"></span> <span class="hidden-xs">'+c.TodoTxtResources.get("IMPORT")+'</span> <input id="fileUpload-input" type="file" placeholder="Select todo.txt File">                 </a>                 <a id="addTaskButton-button" class="btn btn-lg btn-primary ellipsis" data-toggle="tooltip" data-placement="top" text="'+c.TodoTxtResources.get("ADD_TASK")+'">                     <span class="glyphicon glyphicon-plus"></span> <span class="hidden-xs">'+c.TodoTxtResources.get("ADD_TASK")+'</span>                 </a>                 <a id="saveFileButton-button" class="btn btn-lg btn-primary ellipsis" data-toggle="tooltip" data-placement="top" text="'+c.TodoTxtResources.get("EXPORT")+'">                     <span class="glyphicon glyphicon-open"></span> <span class="hidden-xs">'+c.TodoTxtResources.get("EXPORT")+'</span>                 </a>                 <a id="showClosed-label" class="btn btn-lg btn-danger ellipsis" data-toggle="tooltip" data-placement="top" text="'+c.TodoTxtResources.get("SHOW_CLOSED")+'">                     <span class="glyphicon glyphicon-ok-circle"></span> <span class="hidden-xs">'+c.TodoTxtResources.get("SHOW_CLOSED")+'</span>                 </a>             </div>         </div>         <div class="row">             <div class="input-group input-group-lg">                 <input id="filter-input" type="text" class="form-control" placeholder="'+c.TodoTxtResources.get("FILTER_PLACEHOLDER_TEXT")+'">                 <span class="input-group-btn">                     <button id="clearFilter-button" class="btn btn-primary" type="button" data-toggle="tooltip" data-placement="top" text="'+c.TodoTxtResources.get("CLEAR_FILTER")+'"><span class="glyphicon glyphicon-remove-circle"></span> <span class="hidden-xs">'+c.TodoTxtResources.get("CLEAR_FILTER")+'</span></button>                 </span>             </div>         </div>         <div class="row">             <div id="listContainer-div"></div>         </div>     </div>     <div class="col-md-3">         <div id="priorities-div" class="panel panel-primary">             <div class="panel-heading">                 <h3 class="panel-title"><span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span> '+c.TodoTxtResources.get("PRIORITIES")+'</h3>             </div>             <div class="panel-body">                 <ul id="priorities-ul" class="list-group"></ul>             </div>         </div>         <div id="projects-div" class="panel panel-primary">             <div class="panel-heading">                 <h3 class="panel-title"><span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span> '+c.TodoTxtResources.get("PROJECTS")+'</h3>             </div>             <div class="panel-body">                 <ul id="projects-ul" class="list-group"></ul>             </div>         </div>         <div id="contexts-div" class="panel panel-primary">             <div class="panel-heading">                 <h3 class="panel-title"><span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span> '+c.TodoTxtResources.get("CONTEXTS")+'</h3>             </div>             <div class="panel-body">                 <ul id="contexts-ul" class="list-group"></ul>             </div>         </div>     </div>     </div>',t=document.getElementById("todotxt");t&&(t.innerHTML=e)}}(t.TodoTxtView||(t.TodoTxtView={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),a=n(1),r=n(0),i=n(4);!function(e){function t(e){var t=e||"",n=new a.TodoTxtTask(t);return c(n),n.id}function n(e){return i.TodoTxtVault.getTask(e)}function s(t,o){var r;try{r=n(t)}catch(e){r=new a.TodoTxtTask}return r.parseInput(o),e.addTask(r),!0}function c(e){i.TodoTxtVault.addTask(e),l(e)}function l(e){e.priority&&o.TodoTxtAttributes.priorities.add(e.priority),e.projects.forEach((function(e){e&&o.TodoTxtAttributes.projects.add(e)})),e.contexts.forEach((function(e){e&&o.TodoTxtAttributes.contexts.add(e)}))}function d(e,t){var n=e.isActive,o=t.isActive,a=e.priority,r=t.priority,i=e.createdDate,s=t.createdDate,c=e.completedDate,l=t.completedDate;if(n!==o)return n?-1:1;if(a!==r){if(!r||a<r)return-1;if(!a||a>r)return 1}else{if(i!==s)return i<s?-1:1;if(c!==l)return c>l?-1:1}return 0}e.getSortedTaskArray=function(){var e=i.TodoTxtVault.getAllTasks();o.TodoTxtAttributes.reset();for(var t=0;t<e.length;t++)l(e[t]);return e.sort(d),e},e.getFilteredTaskArray=function(t){var n=e.getSortedTaskArray();if(t&&""!==t){for(var o=t.split(" "),a="",r=0;r<o.length;r++){a+=".*("+o[r].replace(/([-\(\)\[\]\{\}+\?*\.$\^\|,:#<\!\\])/g,"\\$1").replace(/\x08/g,"\\x08")+").*"}var i=new RegExp(a,"i"),s=n.filter((function(e){return e.text.match(i)}));n=s}return n},e.parseTodoTxtFile=function(e,n){n||i.TodoTxtVault.removeAllTasks();var o=e.split("\n");for(var a in o)if("string"==typeof o[a]){var r=o[a];r&&""!==r&&t(r)}},e.createTask=t,e.getTask=n,e.updateTask=s,e.addTask=c,e.closeTask=function(e){var t=n(e);if(t&&t.isActive){var o=t.text;return t.priority&&(o=o.replace(t.priority,"")),o="x "+r.TodoTxtUtils.formatDate(new Date)+" "+o,s(t.id,o),!0}return!1},e.activateTask=function(e){var t=n(e);if(t&&!t.isActive){var o=t.text;return o=o.replace(/^(x )/,"").replace(t.completedDate+" ",""),s(t.id,o),!0}return!1}}(t.TodoTxt||(t.TodoTxt={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t){var n=this;this.tasks=[],this.config={showClosed:!1},e&&e.forEach((function(e){n.tasks.push({id:e.id,text:e.text})})),t&&(this.config=t)};t.TodoTextPersistance=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=n(0);!function(e){var t=new Map;e.register=function(e,n){t.set(e,n)},e.get=function(e){var n=t.get(a.TodoTxtUtils.getLanguage());n||(n=t.get("en-us"));var o=n[e];if(!o)throw"requested resource not found: "+e;return o}}(o=t.TodoTxtResources||(t.TodoTxtResources={})),o.register("en-us",{OVERWRITE_CONFIRM:"This will overwrite any existing list.  Are you sure you wish to proceed?",DELETE_CONFIRM:"Are you sure you want to delete task?",IMPORT:"Import",ADD_TASK:"Add Task",EXPORT:"Export",SHOW_CLOSED:"Show Closed",FILTER_PLACEHOLDER_TEXT:"Type filter(s)",CLEAR_FILTER:"Clear Filter",PRIORITIES:"Priorities",PROJECTS:"Projects",CONTEXTS:"Contexts",CLOSE:"Close",EDIT_TASK_HEADER:"Edit Task",ADD:"Add",UPDATE:"Update",PREVIEW:"Preview",DELETE:"Delete"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,